name: Topos - Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: short
  CARGO: cargo
  CROSS_VERSION: v0.2.5

jobs:
  release-build:
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - build: stable-x86
          rust: stable
          os: ubuntu-latest-16-core
          target: x86_64-unknown-linux-gnu

        - build: linux
          rust: stable
          os: ubuntu-latest-16-core
          target: x86_64-unknown-linux-musl

        - build: stable-aarch64
          rust: stable
          os: ubuntu-latest-16-core
          target: aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-rust
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          with_cache: false

      - name: Use Cross
        if: matrix.os == 'ubuntu-latest-16-core' && matrix.target != ''
        shell: bash
        run: |
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --release ${{ env.TARGET_FLAGS }}
          bin="target/${{ matrix.target }}/release/topos"
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Rename binary
        shell: bash
        run: |
          export arch=$(echo ${{ matrix.target }} | cut -d- -f1)
          export version=${GITHUB_REF#refs/*/}
          echo "arch=${arch}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_ENV
          mv $BIN topos-${version}-${arch}
          tar -czvf topos-${version}-${arch}.tgz topos-${version}-${arch}

      - name: Upload release artifacts for ${{ matrix.target }} architecture
        uses: actions/upload-artifact@v3
        with:
          name: topos-${{ matrix.target }}
          if-no-files-found: error
          path: |
            topos-${{ env.version }}-${{ env.arch }}.tgz

      - name: Publish binaries for ${{ matrix.target }} release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            topos-${{ env.version }}-${{ env.arch }}.tgz

  notify-release:
    needs: release-build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release'}} && ${{ github.event.release.prerelease == 'false' }}
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "repository": "${{ github.repository }}",
              "version": "${{ github.ref }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ vars.RELEASE_PIPELINE_SLACK_WEBHOOK_URL }}
